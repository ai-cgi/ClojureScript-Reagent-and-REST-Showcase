(ns consulting-day.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<!]]
   [ajax.core :as ajx]
   [accountant.core :as accountant]))
 
(def result-table
[:table.table.table-striped.table-bordered
 {:cell-spacing "0", :width "100%", :border "0"}
 [:thead>tr [:th "Name"] [:th ""]]
 [:tbody] 
 ])


(def details-table
[:table.table.table-striped.table-bordered
 {:cell-spacing "0", :width "100%", :border "0"}
 [:thead>tr [:th "Halt"] [:th "Zugname"] [:th "Zugtyp"] [:th "Uhrzeit"] [:th "Von"] [:th "Gleis"]]
 [:tbody] 
 ])
  
(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components


(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of consulting-day"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))

(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of consulting-day")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About consulting-day"]]))

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About consulting-day"]]]
       [page]
       [:footer
        [:p "consulting-day was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

(def result (reagent/atom ""))

;; transforming json -> html-table
(defn build-result-table [col])

(defn bahnhof-departure-handler [json-result]
  "Request Bahnhof Details Information for bahnhofid"
  (reset! result (conj details-table
                       (map (fn [x] (conj [:tr
                                           (conj (map (fn [y] [:td y]) (vals (select-keys x [:stopName :name :type :dateTime :origin :track]))))])) json-result) 
                       )
          )
  )  

(defn call-ws-details [bahnhofid]
  "Calls REST Service to request Departuer Information"
      (ajx/GET (str "https://api.deutschebahn.com/freeplan/v1/arrivalBoard/" bahnhofid "?date=" (.toJSON (js/Date.))) 
           {:handler (fn [json-result] (bahnhof-departure-handler json-result))
            :error-handler (fn [details] (.warn js/console (str "Failed to refresh from server: " details)))
            :response-format :json, :keywords? true})
)


(defn bahnhof-handler [json-result]
  "cutom handler function to transform json to html"
    (reset! result (conj result-table
                         (map (fn [x] (conj [:tr
                                             (conj (map (fn [y] (let [valdetail (reagent/atom "")] (do (reset! valdetail y)                                                                     
                                                                   [:button {:on-click #(call-ws-details @valdetail)} "Zeige Details"])))
                                                        (vals (select-keys x [:id])))
                                                   (map (fn [y] [:td y])
                                                        (vals (select-keys x [:name])))
                                                    )               
                                             ]))
                              json-result))
            )
)
  
(defn call-ws [bahnhof]
  (ajx/GET (str "https://api.deutschebahn.com/freeplan/v1/location/" bahnhof)
           {:handler (fn [json-result] (bahnhof-handler json-result))
            :error-handler (fn [details] (.warn js/console (str "Failed to refresh from server: " details)))
            :response-format :json, :keywords? true}))

(defn home-page []
 (let [val (reagent/atom "")]
  (fn []
    [:span.main
     [:h1 "CGI Consulting Day"]
     [:ul
      [:li "Abfrage von Bahnhofs Informationen via Rest Server"]
      [:li "Visualisierung der Antwort als dynamische Web Seite"]]
      [:input {:type "text"
               :placeholder "Bahnhof"
               :value @val
               :on-change #(reset! val (-> % .-target .-value))
      }]
     [:button {:on-click #(call-ws @val)} "Suche Bahnhof"]
     [:br]
     [:br]
    @result])))

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))

;; -------------------------
;; Initialize app

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
